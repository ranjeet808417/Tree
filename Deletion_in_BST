#include <iostream>
#include<queue>
using namespace std;
struct bstnode{
int data;
bstnode* left;
bstnode* right;
};
bstnode* findmin(bstnode* root){
while(root->left!=NULL){
        root=root->left;
}
return root;
}

bstnode* getnewnode(int data){
        bstnode* temp=new bstnode();
        temp->data=data;
        temp->left=NULL;
        temp->right=NULL;
        return temp;
}
bstnode* _delete(bstnode* root,int data){
if(root==NULL){
        return NULL;
}
else if(data < root->data){
root->left=_delete(root->left,data);
}
else if(data > root->data){
        root->right=_delete(root->right,data);
}
else {
if(root->left==NULL && root->right==NULL){
        bstnode* temp=root;
        root=NULL;
        delete temp;
        return root;
}
else if(root->left==NULL){
        bstnode* temp=root;
        root=root->right;
        delete temp;
        return root;
}
else if(root->right==NULL){
        bstnode* temp=root;
        root=root->left;
      delete temp;
        return root;
}
else{
bstnode* temp=findmin(root->right);
root->data=temp->data;
root->right=_delete(root->right,temp->data);

}
}


}



void inorder_traverse(bstnode* root){
if(root==NULL){
        return ;
}
inorder_traverse(root->left);
cout<<root->data<<" ";
inorder_traverse(root->right);


}

bstnode* insert(bstnode* root,int data){
if(root==NULL){
root=getnewnode(data);
}
else if(data<=root->data){
        root->left=insert(root->left,data);
}
else if(data >root->data){
root->right=insert(root->right,data);
}
return root;

}

bool search(bstnode* root,int data){
if(root==NULL){
        return false;
}
else if(root->data==data){
        return true;
}
else if(data < root->data){
return search(root->left,data);
}
else if(data > root->data){
return search(root->right,data);
}

}




int main() {
bstnode* root=NULL;
root=insert(root,4);
root=insert(root,34);
root=insert(root,1);
root=insert(root,5);
root=insert(root,8);
root=insert(root,-1);
root=insert(root,2);

//cout<<search(root,1);
inorder_traverse(root);
cout<<endl;
_delete(root,34);
cout<<endl;
inorder_traverse(root);

}
