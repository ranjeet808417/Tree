#include <iostream>
#include<queue>
#include<stack>
using namespace std;
struct bstnode{
int data;
bstnode* left;
bstnode* right;
};
bstnode* getnewnode(int data){
        bstnode* temp=new bstnode();
        temp->data=data;
        temp->left=NULL;
        temp->right=NULL;
        return temp;
}
stack<bstnode*>reverse;
void reverse_levelorder_traversal(bstnode* root){
queue<bstnode*>q;
q.push(root);
while(!q.empty()){
bstnode* temp=q.front();
reverse.push(temp);
q.pop();
if(temp->right){
        q.push(temp->right);
}
if(temp->left){
        q.push(temp->left);
}


}
}
void tree_traverse(bstnode* root){
queue<bstnode*>q1;
q1.push(root);
while(!q1.empty()){
bstnode* temp=q1.front();
q1.pop();
cout<<temp->data<<" ";
if(temp->left!=NULL){
        q1.push(temp->left);
}
if(temp->right!=NULL){
        q1.push(temp->right);
}

}
}
bstnode* insert(bstnode* root,int data){
if(root==NULL){
root=getnewnode(data);
}
else if(data<=root->data){
        root->left=insert(root->left,data);
}
else if(data >root->data){
root->right=insert(root->right,data);
}
return root;

}





int main() {
bstnode* root=NULL;
root=insert(root,8);
root=insert(root,3);
root=insert(root,10);
root=insert(root,1);
root=insert(root,6);
root=insert(root,14);
root=insert(root,4);
root=insert(root,7);
cout<<"level order traversal"<<endl;
tree_traverse(root);
cout<<endl;
reverse_levelorder_traversal(root);
cout<<" reverse level order traversal "<<endl;
while(!reverse.empty()){
cout<<reverse.top()->data<<" ";
reverse.pop();

}


}
