#include <iostream>
#include<queue>
#include<stack>
using namespace std;
struct bstnode{
int data;
bstnode* left;
bstnode* right;
};
bstnode* getnewnode(int data){
        bstnode* temp=new bstnode();
        temp->data=data;
        temp->left=NULL;
        temp->right=NULL;
        return temp;
}

stack<bstnode*>delete_tree(bstnode* root){
queue<bstnode*>q;
stack<bstnode*>s;
q.push(root);
while(!q.empty()){
bstnode* temp=q.front();
q.pop();
if(temp->left){
        q.push(temp->left);
        s.push(temp->left);
}
if(temp->right){
        q.push(temp->right);
        s.push(temp->right);
}
}
return s;
}
bstnode* insert(bstnode* root,int data){
if(root==NULL){
root=getnewnode(data);
}
else if(data<root->data){
        root->left=insert(root->left,data);
}
else if(data >root->data){
root->right=insert(root->right,data);
}
return root;

}
void Delete(stack<bstnode*>s){

while(!s.empty()){
bstnode* curr=s.top();
s.pop();
delete curr;
}

}
void inorder(bstnode* root){
        if(root==NULL){
                return ;
        }
inorder(root->left);
cout<<root->data<<" ";
inorder(root->right);

}

int main() {
bstnode* root=NULL;
root=insert(root,8);
root=insert(root,3);
root=insert(root,10);
root=insert(root,1);
root=insert(root,6);
root=insert(root,14);
root=insert(root,4);
root=insert(root,7);
root=insert(root,13);
root = insert(root, 20); 
    root = insert(root, 8); 
    root = insert(root, 22); 
    root = insert(root, 4); 
    root = insert(root, 12); 
    root = insert(root, 25); 
     root = insert(root, 10); 
    root = insert(root, 14); 
cout<<" before deletion"<<endl;
inorder(root);
stack<bstnode*>s=delete_tree(root);
cout<<endl<<"after deletion";
Delete(s);

}
