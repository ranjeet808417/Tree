#include <iostream>
#include<climits>
using namespace std;
struct bstnode{
int data;
bstnode* left;
bstnode* right;
};
bstnode* getnewnode(int data){
        bstnode* temp=new bstnode();
        temp->data=data;
        temp->left=NULL;
        temp->right=NULL;
        return temp;
}
int max_pathsum(bstnode* root,int *res){
if(root==NULL){
        return 0;
}

int leftsum=max_pathsum(root->left,res);
int rightsum=max_pathsum(root->right,res);
int currmax=max(max(leftsum,rightsum)+root->data,root->data);
*res=max(*res,max(currmax,leftsum+rightsum+root->data));
return currmax;
}
bstnode* insert(bstnode* root,int data){
if(root==NULL){
root=getnewnode(data);
}
else if(data<=root->data){
        root->left=insert(root->left,data);
}
else if(data >root->data){
root->right=insert(root->right,data);
}
return root;

}

bool search(bstnode* root,int data){
if(root==NULL){
        return false;
}
else if(root->data==data){
        return true;
}
else if(data < root->data){
return search(root->left,data);
}
else if(data > root->data){
return search(root->right,data);
}

}




int main() {
bstnode* root=NULL;
/*root=insert(root,8);
root=insert(root,3);
root=insert(root,10);
root=insert(root,1);
root=insert(root,6);
root=insert(root,14);
root=insert(root,4);
root=insert(root,7);
root=insert(root,13);*/
root=insert(root,5);
root=insert(root,17);
root=insert(root,-11);
root=insert(root,12);
root=insert(root,-10);
root=insert(root,3);
root=insert(root,4);
root=insert(root,-3);
root=insert(root,6);

int path=INT_MIN;
max_pathsum(root,&path);
cout<<path;

}
