#include <iostream>
#include<queue>
#include<map>
using namespace std;
struct bstnode{
int data;
bstnode* left;
bstnode* right;
};
bstnode* getnewnode(int data){
        bstnode* temp=new bstnode();
        temp->data=data;
        temp->left=NULL;
        temp->right=NULL;
        return temp;
}
void printleft(bstnode* root){
if(root){
if(root->left){
        cout<<root->data<<" ";
        printleft(root->left);
}
else if(root->right){
        cout<<root->data<<" ";
        printleft(root->right);
}
}
}
void printright(bstnode* root){
if(root){
if(root->right){
       printright(root->right);
      cout<<root->data<<" ";
}
else if(root->left){
        printright(root->left);
        cout<<root->data<<" ";
        
}
}
}
void printleaf(bstnode* root){
if(root==NULL){
        return ;
}
printleaf(root->left);
if(!root->left && !root->right){
        cout<<root->data<<" ";
}

printleaf(root->right);
}

void print_boundary(bstnode* root){
if(root){
cout<<root->data<<" ";
printleft(root->left);
printleaf(root->left);
printleaf(root->right);
printright(root->right);
}


}


bstnode* insert(bstnode* root,int data){
if(root==NULL){
root=getnewnode(data);
}
else if(data<=root->data){
        root->left=insert(root->left,data);
}
else if(data >root->data){
root->right=insert(root->right,data);
}
return root;

}



int main() {
bstnode* root=NULL;
root=insert(root,8);
root=insert(root,3);
root=insert(root,10);
root=insert(root,1);
root=insert(root,6);
root=insert(root,14);
root=insert(root,4);
root=insert(root,7);
root=insert(root,13);
/*root = insert(root, 20); 
    root = insert(root, 8); 
    root = insert(root, 22); 
    root = insert(root, 4); 
    root = insert(root, 12); 
    root = insert(root, 25); 
     root = insert(root, 10); 
    root = insert(root, 14); */
print_boundary(root);


}
