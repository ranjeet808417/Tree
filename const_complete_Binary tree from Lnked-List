#include <iostream>
#include<queue>
using namespace std;
struct bstnode{
int data;
bstnode* left;
bstnode* right;
};
bstnode* getnewnode(int data){
        bstnode* temp=new bstnode();
        temp->data=data;
        temp->left=NULL;
        temp->right=NULL;
        return temp;
}
struct node{
        int val;
        node* next;
        node(int data){
               val=data;
                next=NULL;
        }
};
bstnode* construct_binarytree(node* head){
bstnode* root=getnewnode(head->val);
head=head->next;
queue<bstnode*>q;
q.push(root);
while(head){
bstnode* temp=q.front();
q.pop();

        temp->left=getnewnode(head->val);
       q.push(temp->left);
        head=head->next;

if(head){
        temp->right=getnewnode(head->val);
q.push(temp->right);
head=head->next;
}


}
return root;
}


/*bstnode* insert(bstnode* root,int data){
if(root==NULL){
root=getnewnode(data);
}
else if(data<=root->data){
        root->left=insert(root->left,data);
}
else if(data >root->data){
root->right=insert(root->right,data);
}
return root;

}
*/
void inorder(bstnode* root){
    if(root==NULL){
        return ;
    }
     
    inorder(root->left);
   cout<<root->data<<" ";
    inorder(root->right);
    
    
}
void tree_traverse(bstnode* root){
queue<bstnode*>Q;
Q.push(root);
while(!Q.empty()){
bstnode* temp=Q.front();
Q.pop();
cout<<temp->data<<" ";
if(temp->left!=NULL){
        Q.push(temp->left);
}
if(temp->right!=NULL){
        Q.push(temp->right);
}

}
}

int main() {
/*bstnode* root=NULL;
root=insert(root,8);
root=insert(root,3);
root=insert(root,10);
root=insert(root,1);
root=insert(root,6);
root=insert(root,14);
root=insert(root,4);
root=insert(root,7);*/
node* head=new node(8);
head->next=new node(3);
head->next->next=new node(10);
head->next->next->next=new node(1);
head->next->next->next->next=new node(6);
head->next->next->next->next->next=new node(9);
head->next->next->next->next->next->next=new node(14);

bstnode* root=NULL;
root=construct_binarytree(head);

cout<<"level order traversal ";
tree_traverse(root);
cout<<endl;
cout<<"inorder traversal ";
inorder(root);

}
