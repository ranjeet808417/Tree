#include <iostream>
#include<queue>
using namespace std;
struct bstnode{
        int data;
        bstnode* left;
        bstnode* right;
};
bstnode* getnewnode(int data){
        bstnode* temp=new bstnode();
        temp->data=data;
        temp->left=NULL;
        temp->right=NULL;
        return temp;
}
void leftmost_rightmostElement(bstnode* root){
queue<bstnode*>q;
q.push(root);
while(1){

int nodesize=q.size();
if(nodesize==0){
        break;
}
if(nodesize==1){
        cout<<q.front()->data<<" ";
bstnode* temp=q.front();
q.pop();
if(temp->left){
        q.push(temp->left);
}
if(temp->right){
        q.push(temp->right);
}

}//if end
else{
cout<<q.front()->data<<" "<<q.back()->data<<" ";
while(nodesize>0){
bstnode* temp=q.front();
q.pop();
if(temp->left){
        q.push(temp->left);
}
if(temp->right){
q.push(temp->right);
}

nodesize--;
}



}//else end




}



}
bstnode* insert(bstnode* root,int data){
if(root==NULL){
root=getnewnode(data);
}
else if(data<=root->data){
        root->left=insert(root->left,data);
}
else if(data >root->data){
root->right=insert(root->right,data);
}
return root;

}


int main() {
     bstnode* root1 = getnewnode(1); 
    root1->left        = getnewnode(2); 
    root1->right       = getnewnode(3); 
    root1->left->left  = getnewnode(4); 
   root1->left->right = getnewnode(5); 
    root1->right->left  =getnewnode(6); 
    root1->left->right->left = getnewnode(7); 
   root1->left->right->right = getnewnode(8); 
  
    bstnode* root2 = getnewnode(1); 
    root2->left         = getnewnode(3); 
    root2->right        = getnewnode(2); 
    root2->right->left   = getnewnode(4); 
   root2->right->right   = getnewnode(5); 
    root2->left->right   = getnewnode(6); 
    root2->right->right->left = getnewnode(8); 
    root2->right->right->right = getnewnode(7);
cout<<"first tree---- \n";
leftmost_rightmostElement(root1);
cout<<endl;
cout<<"second tree---- \n";
leftmost_rightmostElement(root2);

}
