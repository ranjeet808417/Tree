#include <iostream>
#include<stack>
using namespace std;
struct bstnode{
int data;
bstnode* left;
bstnode* right;
};
bstnode* getnewnode(int data){
        bstnode* temp=new bstnode();
        temp->data=data;
        temp->left=NULL;
        temp->right=NULL;
        return temp;
}
void Mirror_of_BST(bstnode* root){
if(root==NULL){
        return ;
}
Mirror_of_BST(root->left);
Mirror_of_BST(root->right);
bstnode* temp=root->left;
root->left=root->right;
root->right=temp;

}


bstnode* insert(bstnode* root,int data){
if(root==NULL){
root=getnewnode(data);
}
else if(data<=root->data){
        root->left=insert(root->left,data);
}
else if(data >root->data){
root->right=insert(root->right,data);
}
return root;

}

void inOrder(bstnode* node)  
{ 
    if (node == NULL)  
        return; 
      
    inOrder(node->left); 
    cout << node->data << " "; 
    inOrder(node->right); 
} 
int main() {
bstnode* root=NULL;
root=insert(root,8);
root=insert(root,3);
root=insert(root,10);
root=insert(root,1);
root=insert(root,6);
root=insert(root,14);
root=insert(root,4);
root=insert(root,7);
root=insert(root,13);
cout<<" inorder traversal before ";
inOrder(root);
cout<<endl;
Mirror_of_BST(root);
cout<<" inorder traversal after ";
inOrder(root);
}
