#include <iostream>
#include<vector>
using namespace std;
struct bstnode{
int data;
bstnode* left;
bstnode* right;
bstnode* nextright;
};
bstnode* getnewnode(int data){
        bstnode* temp=new bstnode();
        temp->data=data;
        temp->left=NULL;
        temp->right=NULL;
        temp->nextright=NULL;
        return temp;
}
void print(vector<int>v,int i){
        for(int j=i;j<v.size();j++){
                cout<<v[j]<<"->";

        }
cout<<endl;
}
void ksum_path(bstnode* root,vector<int>&path,int k){
if(!root){
  return;      
}
path.push_back(root->data);

ksum_path(root->left,path,k);
ksum_path(root->right,path,k);
int sum=0;
for(int i=path.size()-1;i>=0;i--){
sum+=path[i];
if(sum==k){
        print(path,i);
}

}
path.pop_back();
}

bstnode* insert(bstnode* root,int data){
if(root==NULL){
root=getnewnode(data);
}
else if(data<=root->data){
        root->left=insert(root->left,data);
}
else if(data >root->data){
root->right=insert(root->right,data);
}
return root;

}



int main() {
bstnode* root=NULL;
root=getnewnode(1);
root->left=getnewnode(7);
root->right=getnewnode(3);
root->right->left=getnewnode(5);
root->right->right=getnewnode(4);

   vector<int>v;
   int a=8;
   ksum_path(root,v,a);

}
