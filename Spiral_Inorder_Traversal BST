#include <iostream>
#include<queue>
#include<stack>
using namespace std;
struct bstnode{
int data;
bstnode* left;
bstnode* right;
};
bstnode* getnewnode(int data){
        bstnode* temp=new bstnode();
        temp->data=data;
        temp->left=NULL;
        temp->right=NULL;
        return temp;
}
void print_spiral(bstnode* root){
stack<bstnode*>s1;
stack<bstnode*>s2;
s1.push(root);
while(!s1.empty() || !s2.empty()){
while(!s1.empty()){
bstnode* temp=s1.top();
cout<<temp->data<<" ";
s1.pop();
if(temp->left){
        s2.push(temp->left);
}
if(temp->right){
        s2.push(temp->right);
}
}//1while end
while(!s2.empty()){
bstnode* temp=s2.top();
s2.pop();
cout<<temp->data<<" ";
if(temp->right){
        s1.push(temp->right);
}
if(temp->left){
        s1.push(temp->left);
}



}//2while end

}



}

bstnode* insert(bstnode* root,int data){
if(root==NULL){
root=getnewnode(data);
}
else if(data<=root->data){
        root->left=insert(root->left,data);
}
else if(data >root->data){
root->right=insert(root->right,data);
}
return root;

}



int main() {
bstnode* root=NULL;
root=insert(root,8);
root=insert(root,3);
root=insert(root,10);
root=insert(root,1);
root=insert(root,6);
root=insert(root,14);
root=insert(root,4);
root=insert(root,7);
root=insert(root,13);
/*root = insert(root, 20); 
    root = insert(root, 8); 
    root = insert(root, 22); 
    root = insert(root, 4); 
    root = insert(root, 12); 
    root = insert(root, 25); 
     root = insert(root, 10); 
    root = insert(root, 14); */
print_spiral(root);


}
ANOTHER IMPLEMENTATION------------------------------------------------
----------------------------------------------------------------------
--------------------------------------------------------------------
#include <iostream>
#include<queue>
#include<stack>
using namespace std;
struct bstnode{
int data;
bstnode* left;
bstnode* right;
};
bstnode* getnewnode(int data){
        bstnode* temp=new bstnode();
        temp->data=data;
        temp->left=NULL;
        temp->right=NULL;
        return temp;
}

void spiral_traversal(bstnode* root){
queue<bstnode*>q;
q.push(root);
int i=1;
while(1){
int nodesize=q.size();
if(nodesize==0){
        break;
}

if(i%2==0){
while(nodesize>0){
        bstnode* temp=q.front();
        cout<<temp->data<<" ";
        q.pop();
if(temp->left){
        q.push(temp->left);
}
if(temp->right){
        q.push(temp->right);
}
nodesize--;
}
i++;
}//if end
else{
      stack<bstnode*>s;
        while(nodesize>0){
       bstnode* temp=q.front();
       s.push(temp);
        q.pop();
        if(temp->left){
        q.push(temp->left);
       
        }
if(temp->right){
        q.push(temp->right);

}
nodesize--;
        }
while(!s.empty()){
        cout<<s.top()->data<<" ";
s.pop();
}

i++;
}//else close


}


}
bstnode* insert(bstnode* root,int data){
if(root==NULL){
root=getnewnode(data);
}
else if(data<=root->data){
        root->left=insert(root->left,data);
}
else if(data >root->data){
root->right=insert(root->right,data);
}
return root;

}



int main() {
bstnode* root=NULL;
root=insert(root,8);
root=insert(root,3);
root=insert(root,10);
root=insert(root,1);
root=insert(root,6);
root=insert(root,14);
root=insert(root,4);
root=insert(root,7);
root=insert(root,13);
/*root = insert(root, 20); 
    root = insert(root, 8); 
    root = insert(root, 22); 
    root = insert(root, 4); 
    root = insert(root, 12); 
    root = insert(root, 25); 
     root = insert(root, 10); 
    root = insert(root, 14); */
spiral_traversal(root);


}


