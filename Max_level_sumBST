#include <iostream>
#include<climits>
#include<queue>

using namespace std;
struct bstnode{
int data;
bstnode* left;
bstnode* right;

};
bstnode* getnewnode(int data){
        bstnode* temp=new bstnode();
        temp->data=data;
        temp->left=NULL;
        temp->right=NULL;
        
        return temp;
}
int  maximum_level_sum(bstnode* root){

if(root==NULL){
        return 0 ;
}
queue<bstnode*>q;
q.push(root);
int globalmax=root->data;
while(!q.empty()){
int nodesize=q.size();
int localmax=0;

while(nodesize>0){
bstnode* temp=q.front();
localmax+=temp->data;
q.pop();
if(temp->left){
        q.push(temp->left);
}
if(temp->right){
        q.push(temp->right);
}
nodesize--;
}

globalmax=max(globalmax,localmax);
}
return globalmax;
}

bstnode* insert(bstnode* root,int data){
if(root==NULL){
root=getnewnode(data);
}
else if(data<=root->data){
        root->left=insert(root->left,data);
}
else if(data >root->data){
root->right=insert(root->right,data);
}
return root;

}



int main() {
bstnode* root=NULL;
root=insert(root,8);
root=insert(root,3);
root=insert(root,10);
root=insert(root,1);
root=insert(root,6);
root=insert(root,14);
root=insert(root,4);
root=insert(root,7);
root=insert(root,13);
root=insert(root,15);
root=insert(root,12);
   
   cout<<maximum_level_sum(root);
}
