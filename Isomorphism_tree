#include <iostream>
using namespace std;
struct bstnode{
        int data;
        bstnode* left;
        bstnode* right;
};
bstnode* getnewnode(int data){
        bstnode* temp=new bstnode();
        temp->data=data;
        temp->left=NULL;
        temp->right=NULL;
        return temp;
}
bool isomorphism_tree(bstnode* tree1,bstnode* tree2){
if(tree1==NULL && tree2==NULL){
        return true;
}
else if(tree1==NULL || tree2==NULL){
        return false;
}
else if(tree1->data !=tree2->data){
        return true;
}

return (isomorphism_tree(tree1->left,tree2->left) && isomorphism_tree(tree1->right,tree2->right)) || (isomorphism_tree(tree1->left,tree2->right) && isomorphism_tree(tree1->right,tree2->left)); 

}
bstnode* insert(bstnode* root,int data){
if(root==NULL){
root=getnewnode(data);
}
else if(data<=root->data){
        root->left=insert(root->left,data);
}
else if(data >root->data){
root->right=insert(root->right,data);
}
return root;

}


int main() {
     bstnode* root1 = getnewnode(1); 
    root1->left        = getnewnode(2); 
    root1->right       = getnewnode(3); 
    root1->left->left  = getnewnode(4); 
   root1->left->right = getnewnode(5); 
    root1->right->left  =getnewnode(6); 
    root1->left->right->left = getnewnode(7); 
   root1->left->right->right = getnewnode(8); 
  
    bstnode* root2 = getnewnode(1); 
    root2->left         = getnewnode(3); 
    root2->right        = getnewnode(2); 
    root2->right->left   = getnewnode(4); 
   root2->right->right   = getnewnode(5); 
    root2->left->right   = getnewnode(6); 
    root2->right->right->left = getnewnode(8); 
   // root2->right->right->right = getnewnode(7);
if(isomorphism_tree(root1,root2)){
        cout<<"isomorphic_tree";
}
else{
        cout<<"not a isomorphic";
}

}
