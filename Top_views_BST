#include <iostream>
#include<climits>
#include<map>
#include<queue>
using namespace std;
struct bstnode{
int data;
bstnode* left;
bstnode* right;
};
bstnode* getnewnode(int data){
        bstnode* temp=new bstnode();
        temp->data=data;
        temp->left=NULL;
        temp->right=NULL;
        return temp;
}
map<int,int>hdist;
queue<pair<int,bstnode*>>curr;
void Top_viewsBST(bstnode* root){
curr.push({0,root});
while(!curr.empty()){
pair<int,bstnode*>p=curr.front();
int dist=p.first;
bstnode* node=p.second;
curr.pop();
if(hdist.find(dist)==hdist.end()){
        cout<<node->data<<" ";
        hdist[dist]=node->data;
}
if(node->left){
        curr.push({dist-1,node->left});
}
if(node->right){
        curr.push({dist+1,node->right});
}

}


}
bstnode* insert(bstnode* root,int data){
if(root==NULL){
root=getnewnode(data);
}
else if(data<=root->data){
         root->left=insert(root->left,data);
}
else if(data >root->data){
 root->right=insert(root->right,data);
}
return root;

}



int main() {
bstnode* root=NULL;
root=insert(root,8);
root=insert(root,3);
root=insert(root,10);
root=insert(root,1);
root=insert(root,6);
root=insert(root,14);
root=insert(root,4);
root=insert(root,7);
root=insert(root,13);
/*root=insert(root,5);
root=insert(root,17);
root=insert(root,-11);
root=insert(root,12);
root=insert(root,-10);
root=insert(root,3);
root=insert(root,4);
root=insert(root,-3);
root=insert(root,6);
*/
 Top_viewsBST(root);

}
