#include <iostream>
#include<queue>
using namespace std;
struct bstnode{
int data;
bstnode* left;
bstnode* right;
};
bstnode* getnewnode(int data){
        bstnode* temp=new bstnode();
        temp->data=data;
        temp->left=NULL;
        temp->right=NULL;
        return temp;
}
bool identical_tree(bstnode* root1,bstnode* root2){
if(!root1 ||!root2){
        return false;
}

queue<bstnode*>q1;
queue<bstnode*>q2;
q1.push(root1);
q2.push(root2);
while(!q1.empty() && !q2.empty()){
bstnode* first=q1.front();
bstnode* second=q2.front();
q1.pop();
q2.pop();
if(first->data!=second->data){
        return false;
}
if(first->left && second->left){
        q1.push(first->left);
        q2.push(second->left);
}
else if(first->left || second->left){
        return false;
}

if(first->right && second->right){
        q1.push(first->right);
        q2.push(second->right);
}
else if(first->right || second->right){
        return false;
}
}//while end
return true;

}
bstnode* insert(bstnode* root,int data){
if(root==NULL){
root=getnewnode(data);
}
else if(data<=root->data){
        root->left=insert(root->left,data);
}
else if(data >root->data){
root->right=insert(root->right,data);
}
return root;

}



int main() {
bstnode* root1=NULL;
root1=insert(root1,8);
root1=insert(root1,3);
root1=insert(root1,10);
root1=insert(root1,1);
root1=insert(root1,6);
root1=insert(root1,14);
root1=insert(root1,4);
root1=insert(root1,7);
root1=insert(root1,13);
bstnode* root2 = NULL;
root2=insert(root2, 20); 
    root2 = insert(root2, 8); 
    root2 = insert(root2, 22); 
    root2 = insert(root2, 4); 
    root2 = insert(root2, 12); 
    root2 = insert(root2, 25); 
     root2 = insert(root2, 10); 
    root2 = insert(root2, 14); 


cout<<identical_tree(root1,root2);


}
