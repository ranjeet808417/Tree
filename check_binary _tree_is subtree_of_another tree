#include <iostream>
#include<queue>
using namespace std;
struct bstnode{
int data;
bstnode* left;
bstnode* right;
bstnode* nextright;
};
bstnode* getnewnode(int data){
        bstnode* temp=new bstnode();
        temp->data=data;
        temp->left=NULL;
        temp->right=NULL;
        temp->nextright=NULL;
        return temp;
}
bstnode* findroot(bstnode* Tree,int val){
if(Tree==NULL){
        return NULL;
}
if(Tree->data==val){
        return Tree;
}
else if(val>Tree->data){
        return findroot(Tree->right,val);
}
else if(val<Tree->data){
        return findroot(Tree->left,val);
}

}
bool is_subtree(bstnode* Tree,bstnode* subtree){
bstnode* tree=findroot(Tree,subtree->data);
if(!tree){
        return false;
}
else{
queue<bstnode*>q1;
queue<bstnode*>q2;
q1.push(tree);
q2.push(subtree);
while(!q1.empty() && !q2.empty()){
bstnode* first=q1.front();
bstnode* second=q2.front();
q1.pop();
q2.pop();
if(first->data !=second->data){
        return false;
}
if(first->left && second->left){
q1.push(first->left);
q2.push(second->left);
}
else if(first->left || second->left){
return false;
}
if(first->right && second->right){
q1.push(first->right);
q2.push(second->right);
}
else if(first->right || second->right){
return false;
}



}//whhile
return true;
}//else

}

bstnode* insert(bstnode* root,int data){
if(root==NULL){
root=getnewnode(data);
}
else if(data<=root->data){
        root->left=insert(root->left,data);
}
else if(data >root->data){
root->right=insert(root->right,data);
}
return root;

}



int main() {
bstnode* root1=NULL;
root1=insert(root1,8);
root1=insert(root1,3);
root1=insert(root1,10);
root1=insert(root1,1);
root1=insert(root1,6);
root1=insert(root1,14);
root1=insert(root1,4);
root1=insert(root1,7);
root1=insert(root1,13);
root1=insert(root1,15);
/*root = insert(root, -5); 
    root = insert(root, -7); 
   
    root = insert(root, 12); 
    root = insert(root, 11); 
    root = insert(root, 15); */
    /* root = insert(root, 10); 
    root = insert(root, 14); */
/*root = insert(root, 10); 
    root = insert(root, 13); 
    root = insert(root, 14); 
    root = insert(root, 15); 
    root = insert(root, 9); 
     root = insert(root, 8); 
root = insert(root, 7); */
   // root = insert(root, 13); 
   bstnode* root2=NULL;
root2=insert(root2,10);
root2=insert(root2,14);
root2=insert(root2,13);
root2=insert(root2,15);
cout<<is_subtree(root1,root2);


}
