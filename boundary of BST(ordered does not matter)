#include <iostream>
#include<queue>
#include<map>
using namespace std;
struct bstnode{
int data;
bstnode* left;
bstnode* right;
};
bstnode* getnewnode(int data){
        bstnode* temp=new bstnode();
        temp->data=data;
        temp->left=NULL;
        temp->right=NULL;
        return temp;
}

void boundary_traversal(bstnode* root){
queue<pair<bstnode*,int>>q;
map<int,int>dmap;
q.push({root,0});
while(!q.empty()){
pair<bstnode*,int>p=q.front();
bstnode* temp=p.first;
int dist=p.second;
q.pop();
if(dmap.find(dist)==dmap.end()){
        cout<<temp->data<<" ";
        dmap[dist]=temp->data;
}
else if(dmap.find(dist)!=dmap.end() && !temp->left && !temp->right){
cout<<temp->data<<" ";

}
if(temp->left){
        q.push({temp->left,dist-1});

}
if(temp->right){
        q.push({temp->right,dist+1});
}


}


}
bstnode* insert(bstnode* root,int data){
if(root==NULL){
root=getnewnode(data);
}
else if(data<=root->data){
        root->left=insert(root->left,data);
}
else if(data >root->data){
root->right=insert(root->right,data);
}
return root;

}



int main() {
bstnode* root=NULL;
/*root=insert(root,8);
root=insert(root,3);
root=insert(root,10);
root=insert(root,1);
root=insert(root,6);
root=insert(root,14);
root=insert(root,4);
root=insert(root,7);
root=insert(root,13);*/
root = insert(root, 20); 
    root = insert(root, 8); 
    root = insert(root, 22); 
    root = insert(root, 4); 
    root = insert(root, 12); 
    root = insert(root, 25); 
     root = insert(root, 10); 
    root = insert(root, 14); 
boundary_traversal(root);


}
