#include<iostream>
using namespace  std;
struct node{
int data;
node* left;
node* right;
int height;
};
node* newnode(int data){
node* temp=new node();
temp->data=data;
temp->left=NULL;
temp->right=NULL;
temp->height=1;
}
int max(int a,int b){
        return (a>b)?a:b; 
}

int Height(node* temp){
        if(temp==NULL){
                return 0;
        }
        else{
                return temp->height;
        }
}
int getbalance(node* temp){
if(temp==NULL){
        return 0;
}
else{
        return Height(temp->left)-Height(temp->right);
}
}
node* rightrotate(node* a){
node* b=a->left;
node* c=b->right;
b->right=a;
a->left=c;

a->height=1+max(Height(a->left),Height(a->right));
b->height=1+max(Height(b->left),Height(b->right));

return b;
}
node* leftrotate(node* a){

        node* b=a->right;
        a->right=b->left;
        b->left=a;
 a->height=1+max(Height(a->left),Height(a->right));
b->height=1+max(Height(b->left),Height(b->right));
        return b;
}

node* findmin(node* temp){
    
    while(temp->left!=NULL){
        
        temp=temp->left;
    }
    
    return temp;
}

node* Delete(node* root,int data){
    if(root==NULL){
        return root;
    }
    else if(data < root->data){
        root->left=Delete(root->left,data);
        
    }
    else if(data > root->data){
        root->right=Delete(root->right,data);
    }
   else{
       if(root->left==NULL && root->right==NULL){
           node* temp=root;
           delete temp;
           root=NULL;
           return root;
           
       }
       else if(root->left==NULL){
          node* temp=root;
          root=root->right;
          delete temp;
          return root;
          
       }
       else if(root->right==NULL){
           node* temp=root;
           root=root->left;
           delete temp;
           return root;
       }
       else{
           node* temp=findmin(root->right);
           root->data=temp->data;
           root->right=Delete(root->right,temp->data);
           
       }
       
   }
   
root->height=1+max(Height(root->left),Height(root->right));
int balance=getbalance(root);

if(balance >1 && data <root->left->data){
        return rightrotate(root);
}
else if(balance <-1 && data > root->right->data){
        return leftrotate(root);
}
else if(balance >1 && data > root->left->data){
root->left=leftrotate(root->left);
return rightrotate(root);
}
else if(balance <-1 && data< root->right->data){
 root->right=rightrotate(root->right);  
 return leftrotate(root);    
}

return root;  
}




node* insert(node* root,int data){
if(root==NULL){
        node* temp=newnode(data);
        return temp;
}
else if(data < root->data){
        root->left=insert(root->left,data);
}
else if(data > root->data){
root->right=insert(root->right,data);
}
else{
        return root;
}

root->height=1+max(Height(root->left),Height(root->right));
int balance=getbalance(root);

if(balance >1 && data <root->left->data){
        return rightrotate(root);
}
else if(balance <-1 && data > root->right->data){
        return leftrotate(root);
}
else if(balance >1 && data > root->left->data){
root->left=leftrotate(root->left);
return rightrotate(root);
}
else if(balance <-1 && data< root->right->data){
 root->right=rightrotate(root->right);  
 return leftrotate(root);    
}

return root;
}

void print(node* root){
       if(root==NULL){
           return;
       }
        cout<<root->data<<" ";
        print(root->left);
        print(root->right);
}



int main(){
node* root=NULL;
root=insert(root,1);
root=insert(root,2);
root=insert(root,3);
root=insert(root,4);
root=insert(root,5);
root=insert(root,9);
root=insert(root,10);
print(root);
Delete(root,9);
cout<<endl;
print(root);
      
      
        return 0;
}
